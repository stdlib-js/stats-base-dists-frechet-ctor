{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-frechet-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-frechet-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-frechet-mean' );\nvar median = require( '@stdlib/stats-base-dists-frechet-median' );\nvar mode = require( '@stdlib/stats-base-dists-frechet-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-frechet-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-frechet-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-frechet-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-frechet-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-frechet-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-frechet-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-frechet-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-frechet-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction frechetCDF( x ) {\n\treturn cdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction frechetLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction frechetLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction frechetPDF( x ) {\n\treturn pdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction frechetQuantile( p ) {\n\treturn quantile( p, this.alpha, this.s, this.m );\n}\n\n\n// MAIN //\n\n/**\n* Fréchet distribution constructor.\n*\n* @constructor\n* @param {number} [alpha=0.0] - shape parameter\n* @param {number} [s=1.0] - scale parameter\n* @param {number} [m=0.0] - location parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @returns {Frechet} distribution instance\n*\n* @example\n* var frechet = new Frechet( 1.0, 1.0, 0.25 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.162\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\nfunction Frechet() {\n\tvar alpha;\n\tvar s;\n\tvar m;\n\tif ( !(this instanceof Frechet) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Frechet();\n\t\t}\n\t\treturn new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tm = arguments[ 2 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter `alpha` must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter `s` must be a number. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter `m` must be a number. Value: `%s`.', m ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\ts = 1.0;\n\t\tm = 0.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'm', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn m;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tm = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Fréchet distribution differential entropy.\n*\n* @name entropy\n* @memberof Frechet.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.entropy;\n* // returns ~2.82\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Frechet.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.kurtosis;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution expected value.\n*\n* @name mean\n* @memberof Frechet.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mean;\n* // returns ~16.705\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution median.\n*\n* @name median\n* @memberof Frechet.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.median;\n* // returns ~15.151\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'median', function get() {\n\treturn median( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution mode.\n*\n* @name mode\n* @memberof Frechet.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mode;\n* // returns ~13.349\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution skewness.\n*\n* @name skewness\n* @memberof Frechet.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.skewness;\n* // returns ~5.605\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution standard deviation.\n*\n* @name stdev\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.stdev;\n* // returns ~6.245\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution variance.\n*\n* @name variance\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.variance;\n* // returns ~38.996\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.s, this.m );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.cdf( 12.0 );\n* // returns ~0.821\n*/\nsetReadOnly( Frechet.prototype, 'cdf', frechetCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logcdf( 12.0 );\n* // returns ~-0.1975\n*/\nsetReadOnly( Frechet.prototype, 'logcdf', frechetLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logpdf( 2.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Frechet.prototype, 'logpdf', frechetLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.pdf( 5.5 );\n* // returns ~0.158\n*/\nsetReadOnly( Frechet.prototype, 'pdf', frechetPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.quantile( 0.5 );\n* // returns ~7.804\n*/\nsetReadOnly( Frechet.prototype, 'quantile', frechetQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Frechet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution constructor.\n*\n* @module @stdlib/stats-base-dists-frechet-ctor\n*\n* @example\n* var Frechet = require( '@stdlib/stats-base-dists-frechet-ctor' );\n*\n* var frechet = new Frechet( 1.0, 1.0, 0.5 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.036\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isPositive","require$$3","isPrimitive","isNumber","require$$4","isnan","require$$5","entropy","require$$6","kurtosis","require$$7","mean","require$$8","median","require$$9","mode","require$$10","skewness","require$$11","stdev","require$$12","variance","require$$13","cdf","require$$14","logcdf","require$$15","logpdf","require$$16","pdf","require$$17","quantile","require$$18","format","require$$19","Frechet","alpha","s","m","this","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","x","p","lib"],"mappings":"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"}