{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-frechet-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-frechet-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-frechet-mean' );\nvar median = require( '@stdlib/stats-base-dists-frechet-median' );\nvar mode = require( '@stdlib/stats-base-dists-frechet-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-frechet-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-frechet-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-frechet-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-frechet-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-frechet-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-frechet-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-frechet-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-frechet-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction frechetCDF( x ) {\n\treturn cdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction frechetLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction frechetLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction frechetPDF( x ) {\n\treturn pdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction frechetQuantile( p ) {\n\treturn quantile( p, this.alpha, this.s, this.m );\n}\n\n\n// MAIN //\n\n/**\n* Fr\u00E9chet distribution constructor.\n*\n* @constructor\n* @param {number} [alpha=0.0] - shape parameter\n* @param {number} [s=1.0] - scale parameter\n* @param {number} [m=0.0] - location parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @returns {Frechet} distribution instance\n*\n* @example\n* var frechet = new Frechet( 1.0, 1.0, 0.25 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.162\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\nfunction Frechet() {\n\tvar alpha;\n\tvar s;\n\tvar m;\n\tif ( !(this instanceof Frechet) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Frechet();\n\t\t}\n\t\treturn new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tm = arguments[ 2 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a number. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', m ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\ts = 1.0;\n\t\tm = 0.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'm', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn m;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tm = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Fr\u00E9chet distribution differential entropy.\n*\n* @name entropy\n* @memberof Frechet.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.entropy;\n* // returns ~2.82\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Frechet.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.kurtosis;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution expected value.\n*\n* @name mean\n* @memberof Frechet.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mean;\n* // returns ~16.705\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution median.\n*\n* @name median\n* @memberof Frechet.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.median;\n* // returns ~15.151\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'median', function get() {\n\treturn median( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution mode.\n*\n* @name mode\n* @memberof Frechet.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mode;\n* // returns ~13.349\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution skewness.\n*\n* @name skewness\n* @memberof Frechet.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.skewness;\n* // returns ~5.605\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution standard deviation.\n*\n* @name stdev\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.stdev;\n* // returns ~6.245\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.s, this.m );\n});\n\n/**\n* Fr\u00E9chet distribution variance.\n*\n* @name variance\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.variance;\n* // returns ~38.996\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.s, this.m );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.cdf( 12.0 );\n* // returns ~0.821\n*/\nsetReadOnly( Frechet.prototype, 'cdf', frechetCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logcdf( 12.0 );\n* // returns ~-0.1975\n*/\nsetReadOnly( Frechet.prototype, 'logcdf', frechetLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logpdf( 2.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Frechet.prototype, 'logpdf', frechetLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.pdf( 5.5 );\n* // returns ~0.158\n*/\nsetReadOnly( Frechet.prototype, 'pdf', frechetPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.quantile( 0.5 );\n* // returns ~7.804\n*/\nsetReadOnly( Frechet.prototype, 'quantile', frechetQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Frechet;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fr\u00E9chet distribution constructor.\n*\n* @module @stdlib/stats-base-dists-frechet-ctor\n*\n* @example\n* var Frechet = require( '@stdlib/stats-base-dists-frechet-ctor' );\n*\n* var frechet = new Frechet( 1.0, 1.0, 0.5 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.036\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "isNumber", "isnan", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "pdf", "quantile", "format", "frechetCDF", "x", "frechetLogCDF", "frechetLogPDF", "frechetPDF", "frechetQuantile", "p", "Frechet", "alpha", "s", "m", "value", "main"]
}
